schema @server(port: 8003) @upstream(baseURL: "http://localhost:8083") {
  query: Query
}

type Queries {
  productTypes: [Products!]! @http(path: "/products")
  topSecretFederationFacts: [TopSecretFact!]!
    @requiresScopes(scopes: [["read:fact"], ["read:all"]])
    @http(path: "/top_secret_facts")
  factTypes: [TopSecretFactType!] @http(path: "/top_secret_facts")
}

enum TopSecretFactType @authenticated {
  DIRECTIVE
  ENTITY
  MISCELLANEOUS
}

interface TopSecretFact @authenticated {
  description: FactContent!
  factType: TopSecretFactType
}

scalar FactContent @requiresScopes(scopes: [["read:scalar"], ["read:all"]])

type DirectiveFact implements TopSecretFact @authenticated {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type EntityFact implements TopSecretFact @requiresScopes(scopes: [["read:entity"]]) {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type MiscellaneousFact implements TopSecretFact {
  title: String!
  description: FactContent! @requiresScopes(scopes: [["read:miscellaneous"]])
  factType: TopSecretFactType
}

enum ProductName {
  CONSULTANCY
  COSMO
  ENGINE
  FINANCE
  HUMAN_RESOURCES
  MARKETING
  SDK
}

type Employee @key(fields: "id") {
  id: Int!
  products: [ProductName!]!
  notes: String @override(from: "employees")
}

union Products = Consultancy | Cosmo | Documentation

type Consultancy @key(fields: "upc") {
  upc: ID!
  name: ProductName!
}

type Cosmo @key(fields: "upc") {
  upc: ID!
  name: ProductName!
  repositoryURL: String!
}

type Documentation {
  url(product: ProductName!): String!
  urls(products: [ProductName!]!): [String!]!
}
