schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/tag/v0.3", import: ["@tag"])
{
  query: Query
  mutation: Mutation
  subscription: Subscription
}

directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @requiresScopes(scopes: [[requiresScopes__Scope!]!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

type Alligator implements Pet & Animal
  @join__implements(graph: FAMILY, interface: "Pet")
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  class: Class!
  dangerous: String!
  gender: Gender!
  name: String!
}

interface Animal
  @join__type(graph: FAMILY)
{
  class: Class!
  gender: Gender!
}

type Cat implements Pet & Animal
  @join__implements(graph: FAMILY, interface: "Pet")
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  class: Class!
  gender: Gender!
  name: String!
  type: CatType!
}

enum CatType
  @join__type(graph: FAMILY)
{
  HOME @join__enumValue(graph: FAMILY)
  STREET @join__enumValue(graph: FAMILY)
}

type City
  @join__type(graph: EMPLOYEES)
{
  type: String!
  name: String!
  country: Country
}

enum Class
  @join__type(graph: FAMILY)
{
  FISH @join__enumValue(graph: FAMILY)
  MAMMAL @join__enumValue(graph: FAMILY)
  REPTILE @join__enumValue(graph: FAMILY)
}

type Consultancy
  @join__type(graph: EMPLOYEES, key: "upc")
  @join__type(graph: PRODUCTS, key: "upc")
{
  upc: ID!
  lead: Employee! @join__field(graph: EMPLOYEES)
  isLeadAvailable: Boolean @join__field(graph: EMPLOYEES, requires: "lead { isAvailable }")
  name: ProductName! @join__field(graph: PRODUCTS)
}

type Cosmo implements IProduct
  @join__implements(graph: EMPLOYEES, interface: "IProduct")
  @join__type(graph: EMPLOYEES, key: "upc")
  @join__type(graph: PRODUCTS, key: "upc")
{
  upc: ID!
  engineers: [Employee!]! @join__field(graph: EMPLOYEES)
  lead: Employee! @join__field(graph: EMPLOYEES)
  name: ProductName! @join__field(graph: PRODUCTS)
  repositoryURL: String! @join__field(graph: PRODUCTS)
}

type Country
  @join__type(graph: EMPLOYEES, key: "key { name }", resolvable: false)
  @join__type(graph: HOBBIES, key: "key { name }", resolvable: false)
{
  key: CountryKey!
}

type CountryKey
  @join__type(graph: EMPLOYEES)
  @join__type(graph: HOBBIES)
{
  name: String!
}

enum Department
  @join__type(graph: EMPLOYEES)
{
  ENGINEERING @join__enumValue(graph: EMPLOYEES)
  MARKETING @join__enumValue(graph: EMPLOYEES)
  OPERATIONS @join__enumValue(graph: EMPLOYEES)
}

type Details
  @join__type(graph: EMPLOYEES)
  @join__type(graph: FAMILY)
{
  forename: String!
  location: Country! @join__field(graph: EMPLOYEES)
  surname: String!
  pastLocations: [City!]! @join__field(graph: EMPLOYEES)
  middlename: String @join__field(graph: FAMILY) @deprecated
  hasChildren: Boolean! @join__field(graph: FAMILY)
  maritalStatus: MaritalStatus @join__field(graph: FAMILY)
  nationality: Nationality! @join__field(graph: FAMILY)
  pets: [Pet] @join__field(graph: FAMILY)
}

type DirectiveFact implements TopSecretFact
  @join__implements(graph: PRODUCTS, interface: "TopSecretFact")
  @join__type(graph: PRODUCTS)
  @authenticated
{
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type Documentation
  @join__type(graph: PRODUCTS)
{
  url(product: ProductName!): String!
  urls(products: [ProductName!]!): [String!]!
}

type Dog implements Pet & Animal
  @join__implements(graph: FAMILY, interface: "Pet")
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  breed: DogBreed!
  class: Class!
  gender: Gender!
  name: String!
}

enum DogBreed
  @join__type(graph: FAMILY)
{
  GOLDEN_RETRIEVER @join__enumValue(graph: FAMILY)
  POODLE @join__enumValue(graph: FAMILY)
  ROTTWEILER @join__enumValue(graph: FAMILY)
  YORKSHIRE_TERRIER @join__enumValue(graph: FAMILY)
}

type Employee implements Identifiable
  @join__implements(graph: EMPLOYEES, interface: "Identifiable")
  @join__type(graph: AVAILABILITY, key: "id")
  @join__type(graph: EMPLOYEES, key: "id")
  @join__type(graph: FAMILY, key: "id")
  @join__type(graph: HOBBIES, key: "id")
  @join__type(graph: MOOD, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
{
  id: Int!
  isAvailable: Boolean! @join__field(graph: AVAILABILITY) @join__field(graph: EMPLOYEES, external: true)
  details: Details @join__field(graph: EMPLOYEES, type: "Details!") @join__field(graph: FAMILY, type: "Details")
  tag: String! @join__field(graph: EMPLOYEES)
  role: RoleType! @join__field(graph: EMPLOYEES)
  notes: String @join__field(graph: PRODUCTS, override: "employees")
  updatedAt: String! @join__field(graph: EMPLOYEES)
  startDate: String! @join__field(graph: EMPLOYEES) @requiresScopes(scopes: [["read:employee", "read:private"], ["read:all"]])
  currentMood: Mood! @join__field(graph: EMPLOYEES, external: true) @join__field(graph: MOOD)
  derivedMood: Mood! @join__field(graph: EMPLOYEES, requires: "currentMood")
  rootFieldThrowsError: String @join__field(graph: EMPLOYEES)
  rootFieldErrorWrapper: ErrorWrapper @join__field(graph: EMPLOYEES)
  hobbies: [Hobby!] @join__field(graph: HOBBIES)
  products: [ProductName!]! @join__field(graph: PRODUCTS)
}

type Engineer implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES)
{
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
  engineerType: EngineerType!
}

enum EngineerType
  @join__type(graph: EMPLOYEES)
{
  BACKEND @join__enumValue(graph: EMPLOYEES)
  FRONTEND @join__enumValue(graph: EMPLOYEES)
  FULLSTACK @join__enumValue(graph: EMPLOYEES)
}

type EntityFact implements TopSecretFact
  @join__implements(graph: PRODUCTS, interface: "TopSecretFact")
  @join__type(graph: PRODUCTS)
  @requiresScopes(scopes: [["read:entity"]])
{
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type ErrorWrapper
  @join__type(graph: EMPLOYEES)
{
  okField: String
  errorField: String
}

type Exercise implements Hobby
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  category: ExerciseType!
}

enum ExerciseType
  @join__type(graph: HOBBIES)
{
  CALISTHENICS @join__enumValue(graph: HOBBIES)
  HIKING @join__enumValue(graph: HOBBIES)
  SPORT @join__enumValue(graph: HOBBIES)
  STRENGTH_TRAINING @join__enumValue(graph: HOBBIES)
}

interface Experience
  @join__type(graph: HOBBIES)
{
  yearsOfExperience: Float!
}

scalar FactContent
  @join__type(graph: PRODUCTS)
  @requiresScopes(scopes: [["read:scalar"], ["read:all"]])

type Flying implements Experience & Hobby
  @join__implements(graph: HOBBIES, interface: "Experience")
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  planeModels: [String!]!
  yearsOfExperience: Float!
}

enum GameGenre
  @join__type(graph: HOBBIES)
{
  ADVENTURE @join__enumValue(graph: HOBBIES)
  BOARD @join__enumValue(graph: HOBBIES)
  FPS @join__enumValue(graph: HOBBIES)
  CARD @join__enumValue(graph: HOBBIES)
  RPG @join__enumValue(graph: HOBBIES)
  ROGUELITE @join__enumValue(graph: HOBBIES)
  SIMULATION @join__enumValue(graph: HOBBIES)
  STRATEGY @join__enumValue(graph: HOBBIES)
}

type Gaming implements Experience & Hobby
  @join__implements(graph: HOBBIES, interface: "Experience")
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  genres: [GameGenre!]!
  name: String!
  yearsOfExperience: Float!
}

enum Gender
  @join__type(graph: FAMILY)
{
  FEMALE @join__enumValue(graph: FAMILY)
  MALE @join__enumValue(graph: FAMILY)
  UNKNOWN @join__enumValue(graph: FAMILY)
}

interface Hobby
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
}

interface Identifiable
  @join__type(graph: EMPLOYEES)
{
  id: Int!
}

interface IProduct
  @join__type(graph: EMPLOYEES)
{
  upc: ID!
  engineers: [Employee!]!
}

scalar join__FieldSet

enum join__Graph {
  AVAILABILITY @join__graph(name: "availability", url: "http://127.0.0.1:4007/graphql")
  EMPLOYEES @join__graph(name: "employees", url: "http://127.0.0.1:4001/graphql")
  FAMILY @join__graph(name: "family", url: "http://127.0.0.1:4002/graphql")
  HOBBIES @join__graph(name: "hobbies", url: "http://127.0.0.1:4003/graphql")
  MOOD @join__graph(name: "mood", url: "http://127.0.0.1:4008/graphql")
  PRODUCTS @join__graph(name: "products", url: "http://127.0.0.1:4004/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum MaritalStatus
  @join__type(graph: FAMILY)
{
  ENGAGED @join__enumValue(graph: FAMILY)
  MARRIED @join__enumValue(graph: FAMILY)
}

type Marketer implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES)
{
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
}

type MiscellaneousFact implements TopSecretFact
  @join__implements(graph: PRODUCTS, interface: "TopSecretFact")
  @join__type(graph: PRODUCTS)
{
  title: String!
  description: FactContent! @requiresScopes(scopes: [["read:miscellaneous"]])
  factType: TopSecretFactType
}

enum Mood
  @join__type(graph: EMPLOYEES)
  @join__type(graph: MOOD)
{
  HAPPY @join__enumValue(graph: EMPLOYEES) @join__enumValue(graph: MOOD)
  SAD @join__enumValue(graph: EMPLOYEES) @join__enumValue(graph: MOOD)
}

type Mouse implements Pet & Animal
  @join__implements(graph: FAMILY, interface: "Pet")
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  class: Class!
  gender: Gender!
  name: String!
}

type Mutation
  @join__type(graph: AVAILABILITY)
  @join__type(graph: EMPLOYEES)
  @join__type(graph: MOOD)
  @join__type(graph: PRODUCTS)
{
  updateAvailability(employeeID: Int!, isAvailable: Boolean!): Employee! @join__field(graph: AVAILABILITY)
  updateEmployeeTag(id: Int!, tag: String!): Employee @join__field(graph: EMPLOYEES)
  singleUpload(file: Upload!): Boolean! @join__field(graph: EMPLOYEES)
  multipleUpload(files: [Upload!]!): Boolean! @join__field(graph: EMPLOYEES)
  updateMood(employeeID: Int!, mood: Mood!): Employee! @join__field(graph: MOOD)
  addFact(fact: TopSecretFactInput!): TopSecretFact! @join__field(graph: PRODUCTS) @requiresScopes(scopes: [["write:fact"], ["write:all"]])
}

enum Nationality
  @join__type(graph: FAMILY)
{
  AMERICAN @join__enumValue(graph: FAMILY)
  DUTCH @join__enumValue(graph: FAMILY)
  ENGLISH @join__enumValue(graph: FAMILY)
  GERMAN @join__enumValue(graph: FAMILY)
  INDIAN @join__enumValue(graph: FAMILY)
  SPANISH @join__enumValue(graph: FAMILY)
  UKRAINIAN @join__enumValue(graph: FAMILY)
}

input NestedSearchInput
  @join__type(graph: FAMILY)
{
  maritalStatus: MaritalStatus
  hasChildren: Boolean
}

enum OperationType
  @join__type(graph: EMPLOYEES)
{
  FINANCE @join__enumValue(graph: EMPLOYEES)
  HUMAN_RESOURCES @join__enumValue(graph: EMPLOYEES)
}

type Operator implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES)
{
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
  operatorType: [OperationType!]!
}

type Other implements Hobby
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  name: String!
}

interface Pet implements Animal
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  class: Class!
  gender: Gender!
  name: String!
}

type Pony implements Pet & Animal
  @join__implements(graph: FAMILY, interface: "Pet")
  @join__implements(graph: FAMILY, interface: "Animal")
  @join__type(graph: FAMILY)
{
  class: Class!
  gender: Gender!
  name: String!
}

enum ProductName
  @join__type(graph: PRODUCTS)
{
  CONSULTANCY @join__enumValue(graph: PRODUCTS)
  COSMO @join__enumValue(graph: PRODUCTS)
  ENGINE @join__enumValue(graph: PRODUCTS)
  FINANCE @join__enumValue(graph: PRODUCTS)
  HUMAN_RESOURCES @join__enumValue(graph: PRODUCTS)
  MARKETING @join__enumValue(graph: PRODUCTS)
  SDK @join__enumValue(graph: PRODUCTS)
}

union Products
  @join__type(graph: EMPLOYEES)
  @join__type(graph: PRODUCTS)
  @join__unionMember(graph: EMPLOYEES, member: "Consultancy")
  @join__unionMember(graph: PRODUCTS, member: "Consultancy")
  @join__unionMember(graph: EMPLOYEES, member: "Cosmo")
  @join__unionMember(graph: PRODUCTS, member: "Cosmo")
  @join__unionMember(graph: EMPLOYEES, member: "SDK")
  @join__unionMember(graph: PRODUCTS, member: "Documentation")
 = Consultancy | Cosmo | SDK | Documentation

type Programming implements Hobby
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  languages: [ProgrammingLanguage!]!
}

enum ProgrammingLanguage
  @join__type(graph: HOBBIES)
{
  CSHARP @join__enumValue(graph: HOBBIES)
  GO @join__enumValue(graph: HOBBIES)
  RUST @join__enumValue(graph: HOBBIES)
  TYPESCRIPT @join__enumValue(graph: HOBBIES)
}

type Query
  @join__type(graph: AVAILABILITY)
  @join__type(graph: EMPLOYEES)
  @join__type(graph: FAMILY)
  @join__type(graph: HOBBIES)
  @join__type(graph: MOOD)
  @join__type(graph: PRODUCTS)
{
  employee(id: Int!): Employee @join__field(graph: EMPLOYEES)
  employeeAsList(id: Int!): [Employee] @join__field(graph: EMPLOYEES)
  employees: [Employee] @join__field(graph: EMPLOYEES)
  products: [Products!]! @join__field(graph: EMPLOYEES)
  teammates(team: Department!): [Employee!]! @join__field(graph: EMPLOYEES)
  firstEmployee: Employee! @join__field(graph: EMPLOYEES) @tag(name: "internal")
  findEmployees(criteria: SearchInput): [Employee!]! @join__field(graph: FAMILY)
  productTypes: [Products!]! @join__field(graph: PRODUCTS)
  topSecretFederationFacts: [TopSecretFact!]! @join__field(graph: PRODUCTS) @requiresScopes(scopes: [["read:fact"], ["read:all"]])
  factTypes: [TopSecretFactType!] @join__field(graph: PRODUCTS)
}

scalar requiresScopes__Scope

interface RoleType
  @join__type(graph: EMPLOYEES)
{
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
}

type SDK implements IProduct
  @join__implements(graph: EMPLOYEES, interface: "IProduct")
  @join__type(graph: EMPLOYEES, key: "upc")
  @join__type(graph: HOBBIES, key: "upc")
{
  upc: ID!
  engineers: [Employee!]! @join__field(graph: EMPLOYEES)
  owner: Employee! @join__field(graph: EMPLOYEES)
  unicode: String! @join__field(graph: EMPLOYEES)
  clientLanguages: [ProgrammingLanguage!]! @join__field(graph: HOBBIES)
}

input SearchInput
  @join__type(graph: FAMILY)
{
  hasPets: Boolean
  nationality: Nationality
  nested: NestedSearchInput
}

type Subscription
  @join__type(graph: EMPLOYEES)
  @join__type(graph: HOBBIES)
{
  """`currentTime` will return a stream of `Time` objects."""
  currentTime: Time! @join__field(graph: EMPLOYEES)
  countEmp(max: Int!, intervalMilliseconds: Int!): Int! @join__field(graph: EMPLOYEES)
  countEmp2(max: Int!, intervalMilliseconds: Int!): Int! @join__field(graph: EMPLOYEES)
  countHob(max: Int!, intervalMilliseconds: Int!): Int! @join__field(graph: HOBBIES)
}

type Time
  @join__type(graph: EMPLOYEES)
{
  unixTime: Int!
  timeStamp: String!
}

interface TopSecretFact
  @join__type(graph: PRODUCTS)
  @authenticated
{
  description: FactContent!
  factType: TopSecretFactType
}

input TopSecretFactInput
  @join__type(graph: PRODUCTS)
{
  title: String!
  description: FactContent!
  factType: TopSecretFactType!
}

enum TopSecretFactType
  @join__type(graph: PRODUCTS)
  @authenticated
{
  DIRECTIVE @join__enumValue(graph: PRODUCTS)
  ENTITY @join__enumValue(graph: PRODUCTS)
  MISCELLANEOUS @join__enumValue(graph: PRODUCTS)
}

type Travelling implements Hobby
  @join__implements(graph: HOBBIES, interface: "Hobby")
  @join__type(graph: HOBBIES)
{
  employees: [Employee!]!
  countriesLived: [Country!]!
}

scalar Upload
  @join__type(graph: EMPLOYEES)