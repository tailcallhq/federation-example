schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/tag/v0.3", import: ["@tag"]) {
  query: Query
}

directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(
  graph: join__Graph
  requires: join__FieldSet
  provides: join__FieldSet
  type: String
  external: Boolean
  override: String
  usedOverridden: Boolean
) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(
  graph: join__Graph!
  interface: String!
) repeatable on OBJECT | INTERFACE

directive @join__type(
  graph: join__Graph!
  key: join__FieldSet
  extension: Boolean! = false
  resolvable: Boolean! = true
  isInterfaceObject: Boolean! = false
) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(
  graph: join__Graph!
  member: String!
) repeatable on UNION

directive @link(
  url: String
  as: String
  for: link__Purpose
  import: [link__Import]
) repeatable on SCHEMA

directive @requiresScopes(
  scopes: [[requiresScopes__Scope!]!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

directive @tag(
  name: String!
) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

type Query @join__type(graph: EMPLOYEES) @join__type(graph: GENERIC) {
  employees: [Employee] @join__field(graph: EMPLOYEES)
  bigResponse(
    artificialDelay: Int! = 0
    bigObjects: Int! = 100
    nestedObjects: Int! = 100
    deeplyNestedObjects: Int! = 100
  ): [BigObject!]! @join__field(graph: GENERIC)
}

enum Department @join__type(graph: EMPLOYEES) {
  ENGINEERING @join__enumValue(graph: EMPLOYEES)
  MARKETING @join__enumValue(graph: EMPLOYEES)
  OPERATIONS @join__enumValue(graph: EMPLOYEES)
}

interface Identifiable @join__type(graph: EMPLOYEES) {
  id: Int!
}

scalar join__FieldSet

enum join__Graph {
  EMPLOYEES
    @join__graph(name: "employees", url: "http://127.0.0.1:4001/graphql")
  GENERIC @join__graph(name: "GENERIC", url: "http://127.0.0.1:4006/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar Map @join__type(graph: GENERIC)

type Employee implements Identifiable
  @join__type(graph: EMPLOYEES, key: "id")
  @join__implements(graph: EMPLOYEES, interface: "Identifiable") {
  id: Int!
  details: Details!
  tag: String!
  role: RoleType!
  notes: String
  updatedAt: String!
  startDate: String!
}

type BigObject @join__type(graph: GENERIC) {
  nestedObjects: [NestedObject!]!
}

type DeeplyNestedObject @join__type(graph: GENERIC) {
  aFieldOnDeeplyNestedObject: String!
  bFieldOnDeeplyNestedObject: Int!
  cFieldOnDeeplyNestedObject: Boolean!
  dFieldOnDeeplyNestedObject: Float!
  eFieldOnDeeplyNestedObject: String!
  fFieldOnDeeplyNestedObject: Int!
  gFieldOnDeeplyNestedObject: Boolean!
  hFieldOnDeeplyNestedObject: Float!
  iFieldOnDeeplyNestedObject: String!
  jFieldOnDeeplyNestedObject: Int!
  kFieldOnDeeplyNestedObject: Boolean!
  lFieldOnDeeplyNestedObject: Float!
  mFieldOnDeeplyNestedObject: String!
  nFieldOnDeeplyNestedObject: Int!
  oFieldOnDeeplyNestedObject: Boolean!
  pFieldOnDeeplyNestedObject: Float!
  qFieldOnDeeplyNestedObject: String!
  rFieldOnDeeplyNestedObject: Int!
  sFieldOnDeeplyNestedObject: Boolean!
  tFieldOnDeeplyNestedObject: Float!
  uFieldOnDeeplyNestedObject: String!
  vFieldOnDeeplyNestedObject: Int!
  wFieldOnDeeplyNestedObject: Boolean!
  xFieldOnDeeplyNestedObject: Float!
  yFieldOnDeeplyNestedObject: String!
  zFieldOnDeeplyNestedObject: Int!
}

type Details @join__type(graph: EMPLOYEES) {
  forename: String!
  surname: String!
}

type Engineer implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES) {
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
  engineerType: EngineerType!
}

enum EngineerType @join__type(graph: EMPLOYEES) {
  BACKEND @join__enumValue(graph: EMPLOYEES)
  FRONTEND @join__enumValue(graph: EMPLOYEES)
  FULLSTACK @join__enumValue(graph: EMPLOYEES)
}

type NestedObject @join__type(graph: GENERIC) {
  deeplyNestedObjects: [DeeplyNestedObject!]!
}

type Operator implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES) {
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
  operatorType: [OperationType!]!
}

type Marketer implements RoleType
  @join__implements(graph: EMPLOYEES, interface: "RoleType")
  @join__type(graph: EMPLOYEES) {
  departments: [Department!]!
  title: [String!]!
}

scalar requiresScopes__Scope

interface RoleType @join__type(graph: EMPLOYEES) {
  departments: [Department!]!
  title: [String!]!
  employees: [Employee!]!
}
