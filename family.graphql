schema
  @server(port: 8001, enableFederation: true)
  @upstream(baseURL: "http://localhost:8081", batch: { delay: 10 }) {
  query: Query
}

type Query {
  findEmployees(criteria: SearchInput): [Employee!]!
    @http(
      baseURL: "http://localhost:8081"
      path: "/family/employees"
      query: [
        {
          key: "has_pets"
          value: "{{.args.criteria.hasPets}}"
          skipEmpty: true
        }
        {
          key: "nationality"
          value: "{{.args.criteria.nationality}}"
          skipEmpty: true
        }
        { key: "nested", value: "{{.args.criteria.nested}}", skipEmpty: true }
      ]
    )
}

enum Class {
  FISH @alias(options: ["Fish"])
  MAMMAL @alias(options: ["Mammal"])
  REPTILE @alias(options: ["Reptile"])
}

enum Gender {
  FEMALE @alias(options: ["Male"])
  MALE @alias(options: ["Female"])
  UNKNOWN @alias(options: ["Unknown"])
}

interface Animal {
  class: Class!
  gender: Gender!
}

interface Pet implements Animal {
  class: Class!
  gender: Gender!
  name: String!
}

enum CatType {
  HOME @alias(options: ["Home"])
  STREET @alias(options: ["Street"])
}

type Alligator implements Pet & Animal {
  class: Class!
  dangerous: String!
  gender: Gender!
  name: String!
}

type Cat implements Pet & Animal {
  class: Class!
  gender: Gender!
  name: String!
  type: CatType!
}

enum DogBreed {
  GOLDEN_RETRIEVER @alias(options: ["Golden Retriever"])
  POODLE @alias(options: ["Poodle"])
  ROTTWEILER @alias(options: ["Rottweiler"])
  YORKSHIRE_TERRIER @alias(options: ["Yorkshire Terrier"])
}

type Dog implements Pet & Animal {
  breed: DogBreed!
  class: Class!
  gender: Gender!
  name: String!
}

type Mouse implements Pet & Animal {
  class: Class!
  gender: Gender!
  name: String!
  _mouse: String
}

type Pony implements Pet & Animal {
  class: Class!
  gender: Gender!
  name: String!
  _pony: String
}

enum MaritalStatus {
  ENGAGED @alias(options: ["Engaged"])
  MARRIED @alias(options: ["Married"])
}

enum Nationality {
  AMERICAN @alias(options: ["American"])
  DUTCH @alias(options: ["Dutch"])
  ENGLISH @alias(options: ["English"])
  GERMAN @alias(options: ["German"])
  INDIAN @alias(options: ["Indian"])
  SPANISH @alias(options: ["Spanish"])
  UKRAINIAN @alias(options: ["Ukrainian"])
}

type Details {
  forename: String! @shareable
  middlename: String @deprecated
  surname: String! @shareable
  has_children: Boolean! @modify(name: "hasChildren")
  marital_status: MaritalStatus @modify(name: "maritalStatus")
  nationality: Nationality!
  pets: [Pet]
}

type Employee
  @key(fields: "id")
  @http(
    baseURL: "http://localhost:8081"
    path: "/family/employees"
    query: [{ key: "id", value: "{{.value.id}}", batchKey: ["id"] }]
  ) {
  details: Details @shareable
  id: Int!
}

input SearchInput {
  hasPets: Boolean
  nationality: Nationality
  nested: NestedSearchInput
}

input NestedSearchInput {
  maritalStatus: MaritalStatus
  hasChildren: Boolean
}
