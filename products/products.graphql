schema {
  query: Query
}

type Query {
  productTypes: [Products!]!
    @discriminate(field: "type")
    @http(url: "http://127.0.0.1:8083/products")
  topSecretFederationFacts: [TopSecretFact!]!
    @http(url: "http://127.0.0.1:8083/top_secret_facts")
    @discriminate(field: "type")
  factTypes: [TopSecretFactType!] @http(url: "http://127.0.0.1:8083/fact_types")
}

enum TopSecretFactType {
  DIRECTIVE
  ENTITY
  MISCELLANEOUS
}

interface TopSecretFact {
  description: FactContent!
  factType: TopSecretFactType
}

scalar FactContent

type DirectiveFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type EntityFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

type MiscellaneousFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
}

enum ProductName {
  CONSULTANCY
  COSMO
  ENGINE
  FINANCE
  HUMAN_RESOURCES
  MARKETING
  SDK
}

type Employee {
  id: Int!
  products: [ProductName!]!
    @http(url: "http://127.0.0.1:8083/products/employees/{{.value.id}}", select: "{{.products}}")
  notes: String
    @http(url: "http://127.0.0.1:8083/products/employees/{{.value.id}}", select: "{{.notes}}")
}

union Products = Consultancy | Cosmo | Documentation

type Consultancy {
  upc: ID!
  name: ProductName!
    @http(url: "http://127.0.0.1:8083/products/{{.value.upc}}", select: "{{.name}}")
}

type Cosmo {
  upc: ID!
  name: ProductName!
    @http(url: "http://127.0.0.1:8083/products/{{.value.upc}}", select: "{{.name}}")
  repositoryUrl: String!
    @http(url: "http://127.0.0.1:8083/products/{{.value.upc}}", select: "{{.repositoryUrl}}")
}

type Documentation {
  url(product: ProductName!): String!
  urls(products: [ProductName!]!): [String!]!
}
