schema
  @server(port: 8003, enableFederation: true)
  @upstream(baseURL: "http://localhost:8083", batch: { delay: 10 }) {
  query: Query
}

type Query {
  productTypes: [Products!]!
    @http(baseURL: "http://localhost:8083", path: "/products")
  topSecretFederationFacts: [TopSecretFact!]!
    @requiresScopes(scopes: [["read:fact"], ["read:all"]])
    @http(baseURL: "http://localhost:8083", path: "/top_secret_facts")
  factTypes: [TopSecretFactType!]
    @http(baseURL: "http://localhost:8083", path: "/fact_types")
}

enum TopSecretFactType @authenticated {
  DIRECTIVE @alias(options: ["Directive"])
  ENTITY @alias(options: ["Entity"])
  MISCELLANEOUS @alias(options: ["Miscellaneous"])
}

interface TopSecretFact @authenticated {
  description: FactContent!
  factType: TopSecretFactType
}

scalar FactContent @requiresScopes(scopes: [["read:scalar"], ["read:all"]])

type DirectiveFact implements TopSecretFact @authenticated {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
  _directiveFact: Boolean
}

type EntityFact implements TopSecretFact
  @requiresScopes(scopes: [["read:entity"]]) {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
  _entityFact: Boolean
}

type MiscellaneousFact implements TopSecretFact {
  title: String!
  description: FactContent! @requiresScopes(scopes: [["read:miscellaneous"]])
  factType: TopSecretFactType
  _miscellaneousFact: Boolean
}

enum ProductName {
  CONSULTANCY @alias(options: ["Consultancy"])
  COSMO @alias(options: ["Cosmo"])
  ENGINE @alias(options: ["Engine"])
  FINANCE @alias(options: ["Finance"])
  HUMAN_RESOURCES @alias(options: ["HumanResources"])
  MARKETING @alias(options: ["Marketing"])
  SDK @alias(options: ["Sdk"])
}

type Employee
  @key(fields: "id")
  @http(
    baseURL: "http://localhost:8083"
    path: "/products/employees"
    query: [{ key: "id", value: "{{.value.id}}", batchKey: ["id"] }]
  ) {
  id: Int!
  products: [ProductName!]!
  notes: String @override(from: "employees")
}

union Products = Consultancy | Cosmo | Documentation

type Consultancy
  @key(fields: "upc")
  @http(
    baseURL: "http://localhost:8083"
    path: "/products?type=consultancy"
    query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
  ) {
  upc: ID!
  name: ProductName!
}

type Cosmo
  @key(fields: "upc")
  @http(
    baseURL: "http://localhost:8083"
    path: "/products?type=cosmo"
    query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
  ) {
  upc: ID!
  name: ProductName!
  repositoryURL: String!
}

type Documentation {
  url(product: ProductName!): String!
  urls(products: [ProductName!]!): [String!]!
}
