schema
  @server(port: 8003)
  @upstream(baseURL: "http://localhost:8083", batch: { delay: 10 }) {
  query: Query
}

type Query {
  productTypes: [Products!]!
    @http(baseURL: "http://localhost:8083", path: "/products")
  topSecretFederationFacts: [TopSecretFact!]!
    @http(baseURL: "http://localhost:8083", path: "/top_secret_facts")
  factTypes: [TopSecretFactType!]
    @http(baseURL: "http://localhost:8083", path: "/fact_types")
}

enum TopSecretFactType {
  DIRECTIVE @alias(options: ["Directive"])
  ENTITY @alias(options: ["Entity"])
  MISCELLANEOUS @alias(options: ["Miscellaneous"])
}

interface TopSecretFact {
  description: FactContent!
  factType: TopSecretFactType
}

scalar FactContent

type DirectiveFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
  _directiveFact: Boolean
}

type EntityFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
  _entityFact: Boolean
}

type MiscellaneousFact implements TopSecretFact {
  title: String!
  description: FactContent!
  factType: TopSecretFactType
  _miscellaneousFact: Boolean
}

enum ProductName {
  CONSULTANCY @alias(options: ["Consultancy"])
  COSMO @alias(options: ["Cosmo"])
  ENGINE @alias(options: ["Engine"])
  FINANCE @alias(options: ["Finance"])
  HUMAN_RESOURCES @alias(options: ["HumanResources"])
  MARKETING @alias(options: ["Marketing"])
  SDK @alias(options: ["Sdk"])
}

type Employee {
  id: Int!
  products: [ProductName!]!
    @http(
      baseURL: "http://localhost:8083"
      path: "/products/employees"
      query: [{ key: "id", value: "{{.value.id}}", batchKey: ["id"] }]
      select: "{{.products}}"
    )
  notes: String
    @http(
      baseURL: "http://localhost:8083"
      path: "/products/employees"
      query: [{ key: "id", value: "{{.value.id}}", batchKey: ["id"] }]
      select: "{{.notes}}"
    )
}

union Products = Consultancy | Cosmo | Documentation

type Consultancy {
  upc: ID!
  name: ProductName! @http(
    baseURL: "http://localhost:8083"
    path: "/products?type=consultancy"
    query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
    select: "{{.name}}"
  )
}

type Cosmo {
  upc: ID!
  name: ProductName! @http(
    baseURL: "http://localhost:8083"
    path: "/products?type=cosmo"
    query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
    select: "{{.name}}"
  )
  repositoryURL: String!@http(
    baseURL: "http://localhost:8083"
    path: "/products?type=cosmo"
    query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
    select: "{{.repositoryURL}}"
  )
}

type Documentation {
  url(product: ProductName!): String!
  urls(products: [ProductName!]!): [String!]!
}
