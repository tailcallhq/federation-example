schema
  @server(port: 8000)
  @upstream(baseURL: "http://localhost:8080", batch: { delay: 10 }) {
  query: Query
}

type Query {
  employee(id: Int!): Employee
    @http(baseURL: "http://localhost:8080", path: "/employees/{{.args.id}}")
  employees: [Employee!]!
    @http(baseURL: "http://localhost:8080", path: "/employees")
  products: [Products!]!
    @http(baseURL: "http://localhost:8080", path: "/products/employees")
  teammates(team: Department!): [Employee!]!
    @http(
      baseURL: "http://localhost:8080"
      path: "/department/{{.args.team}}/employees"
    )
}

type Mutation {
  # TODO: implement
  updateEmployeeTag(id: Int!, tag: String!): Employee
}

type Subscription {
  """
  `currentTime` will return a stream of `Time` objects.
  """
  # TODO: implement
  currentTime: Time!
}

enum Department {
  ENGINEERING
  MARKETING
  OPERATIONS
}

interface RoleType {
  departments: [Department!]!
  title: [String!]!
}

enum EngineerType {
  BACKEND
  FRONTEND
  FULLSTACK
}

interface Identifiable {
  id: Int!
}

type Engineer implements RoleType {
  departments: [Department!]!
  engineer_type: EngineerType @modify(name: "engineerType")
  title: [String!]!
}

type Marketer implements RoleType {
  departments: [Department!]!
  title: [String!]!
}

enum OperationType {
  FINANCE
  HUMAN_RESOURCES
}

type Operator implements RoleType {
  departments: [Department!]!
  operatorType: [OperationType!]!
  title: [String!]!
}

enum Country {
  AMERICA @alias(options: ["America"])
  ENGLAND @alias(options: ["England"])
  GERMANY @alias(options: ["Germany"])
  INDIA @alias(options: ["India"])
  NETHERLANDS @alias(options: ["Netherlands"])
  PORTUGAL @alias(options: ["Portugal"])
  SPAIN @alias(options: ["Spain"])
  UKRAINE @alias(options: ["Ukraine"])
}

type Details {
  forename: String!
  location: Country!
  surname: String!
}

type Employee implements Identifiable {
  details: Details!
  id: Int!
  tag: String!
  role: RoleType!
  notes: String
  updated_at: String! @modify(name: "updatedAt")
  start_date: String! @modify(name: "startDate")
}

type Time {
  unixTime: Int!
  timeStamp: String!
}

union Products = Consultancy | Cosmo | SDK

interface IProduct {
  upc: ID!
  engineers: [Employee!]!
}

type Consultancy {
  upc: ID!
  lead: Employee!
    @http(
      baseURL: "http://localhost:8080"
      path: "/products/employees?type=consultancy"
      query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
      select: "{{.lead}}"
    )
}

type Cosmo implements IProduct {
  upc: ID!
  engineers: [Employee!]!
    @http(
      baseURL: "http://localhost:8080"
      path: "/products/employees?type=cosmo"
      query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
      select: "{{.engineers}}"
    )
  lead: Employee!
    @http(
      baseURL: "http://localhost:8080"
      path: "/products/employees?type=cosmo"
      query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
      select: "{{.lead}}"
    )
}

type SDK implements IProduct {
  upc: ID!
  engineers: [Employee!]!
    @http(
      baseURL: "http://localhost:8080"
      path: "/products/employees?type=sdk"
      query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
      select: "{{.engineers}}"
    )
  owner: Employee!
    @http(
      baseURL: "http://localhost:8080"
      path: "/products/employees?type=sdk"
      query: [{ key: "upc", value: "{{.value.upc}}", batchKey: ["upc"] }]
      select: "{{.owner}}"
    )
}
